response:
	作用:往浏览器写东西
	组成部分:
	响应行:
		格式:
			协议/版本号 状态码 状态码说明
			状态码:
				1xx:已发送请求
				2xx:已完成响应
					200:正常响应
				3xx:还需浏览器进一步操作
					302:重定向 配合响应头:location
					304:读缓存
				4xx:用户操作错误
					404:用户操作错误
					405:访问的方法不存在
				5xx:服务器错误
					500:内部异常
			常用方法:
				setStatus(int 状态码):针对于1xx 2xx 3xx
				了解:	
				sendError(int 状态码):针对于4xx和5xx
	响应头:
		格式:key/value(value可以是多个值)
		常用的方法:
			setHeader
			setContentType
			addHeader
		常见的响应头:
			location:重定向
			refresh:定时刷新,可以刷新到别的页面
			content-type:设置文件的mime类型,设置响应流的编码及告诉浏览器用什么编码打开
			content-disposition:文件下载
			
			重定向:
				方式1:
					setstatus(302);
					res.sethead("location","路径")
				方式2:
					res.sendredirect("路径")
					
    		定时刷新:
				方案1:
					设置头 refresh
				方案2:
					在html上设置.
					<meta http-equiv="refresh" content="3;url=/day10/refresh2.html">
	响应体:
		页面上要展示的内容
			常用方法:
				Writer getWriter():字符流
				ServletOutputStream getOutputStream():字节流
			注意:
				两个流互斥
				当响应完成后,服务器会判断流是否关闭,若没有关闭,服务器会自动关闭(底层使用缓冲流)
			处理响应中文乱码:
				方式1:
					resp.setContentType("text/html;charset=utf-8")
				方式2:
					resp.setHeader("ContentType","text/html;charset=utf-8");
				
文件下载:
	下载方式:
		1.超链接下载
			<a href="/day10/download/day10.txt">下载day10.txt</a>\
			若浏览器能解析该资源的mime类型,则打开,若不能解析则下载
		2.编码下载 通过servlet完成
			<a href="day10/download?name=day10.txt">下载day10</a>
			a.设置文件的mime类型
				String 文件类型=	context.getMimeType("文件名")
				resp.setContentType(文件类型)
			b.设置下载头信息 content-disposition
				res.setHeader("content-disposition","attachment;filename="+文件名称)
			c.提供流
				response.getOutputStream();
		
		扩展:使用commons-io工具类
			对拷流:
				IOUtils.copy(is,os);
				
扩展:
	通过response生成验证码
	验证码:
		作用:防止暴力攻击
		
request:请求
	作用:获取浏览器发送过来的数据
	组成部分:
		请求行:
			格式:
				请求方式 请求资源(网址) 协议/版本
			常用方法:HttpServletRequest
				String getMethod():获取请求方式
				String getRemoteAddr():获取请求者的ip地址(远程地址)
				String getContextPath():在java中获取项目名称(/day10)
				StringBuffer GetRequestURL():获取的是带协议的完整路径(不包含参数)
				String GetRequestURI():获取的是从项目名到参数之前的内容
				String getQueryString():获取get请求的所有参数
				String getProtocal():获取协议版本
						
		请求头:
			格式:key/value(value可以是多个值)
			常用方法:
				String getHeader(String key):通过key获取指定的value
				Enumeration(String) getHeaders(String name):获取key获取指定的value
			重要的请求头:
				user-agent:浏览器内核 
				referer:页面从哪里来,防盗链
		请求体:
			放置post的请求参数
			
操作请求参数
	username=tom&password=123
	常用方法:
		String getParameter(String key):获取一个值
		String[] getParameterValues(String key):通过一个key获取多个值
		Map<String,String[]> getParamtermap
		
请求的中文乱码:
	对于get请求:参数追加到地址栏,会使用utf-8编码,服务器(tomcat7)接收到请求后,使用iso-8859-1解码,
	所以会出现乱码
	对于post请求,参数是放在请求体中,服务器获取请求体的时候使用的iso-8859-1解码
	
	通用的方法:
		new String(参数.getBytes("iso-8859-1"),"utf-8")
	针对于post请求来说:只需要将请求流的编码设置成utf-8
		req.setCharacterEncoding("utf-8")
扩展:
		username = URLDecoder.decode(request.getParameter("username"), "utf-8");
		psw = URLDecoder.decode(request.getParameter("psw"), "ios-8859-1");
文件下载扩展:
	中文名称的文件名下载的时候名称会出现问题
	常见的浏览器需要提供文件名称的utf-8编码
	对于火狐浏览器来说需要提供文件名称的base64编码
	推荐使用工具类编码:
		方式1:downloadutils类编码
		方式2:网络上的方式(8成好使)
			new String (fileName.getBytes("gbk"),"iso-8859-1")
			
域对象:
	request:
		创建:一次请求来的时候
		销毁:响应生成的时候
		作用:
			一次请求里面的数据
		请求转换(请求链,请求串)
			req.getRequestDispatcher("内部路径").forward(req,res);
			
请求转发和重定向区别:
	重定向发送两次请求,请求转换发一次请求
	重定向地址栏发生改变,请求转化不变
	重定向是从浏览器发送,请求转发是服务器内部
	重定向不存在request域对象,请求转发可以使用request域对象
	重定向是response方法,请求转发是request方法
	重定向可以请求转发资源,请求转发不可以
	

			
			
			
			
			
			
			
			
			
			
			
			
			
servlet listener fileter称之为javaweb三大组件.框架就是对着三大组件进行封装
回顾:
ajax:
	异步请求
原生的ajax
	1.创建一个核心对象 xmlhttprequest
		xmlhttprequest xmlhttp=new xmlhttprequest();
	2.编写回调函数
		xmlhttp.onreadystatechange=function(){
		if(xmlhttp.readystate==4&&xmlhttp.status==200)
		成功之后的操作
		responseText
		}
	3.open操作
		xmlhttp.open("请求方式","请求路径")
	4.send操作
		xmlhttp.send([参数]);
			post请求的参数放在send里面
			注意:若请求方式为post且有参数,必须设置一个头
jquery中ajax
	掌握:
		$.get(url,params,fn,type);
			url:访问路径
			params:访问参数 {"a":"b"} 或者 "a=b"
			fn:function(data){}回调函数
			type:回调参数类型.一般为json
		$.post(url,params,fn,type);
			同上.只不过方法为post
		注意:中文乱码问题
	了解:
		jquery对象.load()
	理解:
		$.ajax(选项)
			选项:
				url
				type
				data
				success
				
javaweb三大域对象:
	servletContext
	servletRequest
	httpSession
				
listener(了解) 监听器
	作用:
		监听web中的域对象,三大域对象
	监听内容:
		监听三个对象的创建和销毁
		监听三个对象属性的变化
		监听session中javabean的状态
		
	注意:listener全部是接口

监听3个对象的创建和销毁
	servletContextListener
		创建:服务器创建的时候,会为每一个项目都创建一个servletContext
		销毁:服务器关闭的时候,或者项目被移除的时候
		以后可以用来加载配置文件
	servletRequestListener
		创建:请求来的时候创建
		销毁:响应生成的时候
	HttpSessionListener
		创建:java中第一次调用request.getSession的时候.不正确
		销毁: 
			三种情况:
				session超时
				手动删除
				服务器非正常关闭
监听3个对象属性的变化(添加 替换 删除)
	servletContextAttributeListener
	servletRequestAttributeListener
	servletSessionAttributeListener
监听session中的javabean的状态
	注意:这两个接口需要javabean实现.是让javabean感知到自己的状态
	HttpSessionActivationListener(钝化(写入磁盘)和活化(从磁盘读取))
		钝化:javabean从session中序列化到磁盘中
		活化:javabean从磁盘上加载到了session中
		可以通过配置文件修改javabean什么时候钝化
			修改一个项目
				只需要在项目下/meta-info创建一个context.xml
				内容如下:
						<Context>
							<!--
								maxIdleSwap	:1分钟 如果session不使用就会序列化到硬盘.
								directory	:itheima 序列化到硬盘的文件存放的位置.
							-->
							<Manager className="org.apache.catalina.session.PersistentManager" maxIdleSwap="1">
								<Store className="org.apache.catalina.session.FileStore" directory="itheima"/>
							</Manager>
						</Context>
	HttpSessionBindingListener(绑定和解绑)
		检测javabean是否添加到session中.或者从session中移除.

使用步骤:
	1.编写一个类,实现接口
	2.重写方法
	3.编写配置文件(大部分)
	


filter(掌握) 过滤器
	案例1:自动登录
	需求:
		在登录的时候,勾选自动登录,登录成功后,关闭浏览器,下一次访问网站完成登录操作
	技术分析:
		filter
		cookie

filter:过滤器
	过滤请求和响应
	作用:
		自动登录.
		统一编码.
		过滤关键词
	Filter是一个接口
编写filter步骤:
	1.编写一个类
		a:实现filter接口
		b.重写方法
	2.编写配置文件
		a.注册filter
		b.绑定路径
	3.测试

Filter接口的方法:
	init(FilterConfig config):初始化操作
	doFilter(ServletRequest request,ServletResponse,FilterChain chain):编写具体的业务逻辑
	destory():销毁操作
filter的生命周期
	filter单实例,多线程
	创建:在服务器启动的时候创建,服务器创建,调用init方法
	使用:根据路径,调用dofilter,执行业务逻辑
	销毁:服务器正常关闭或filter被移除的时候,调用destory()
filterchain:过滤链
	通过chain的dofilter方法,可以将请求放行到下一个过滤器,直到最后一个过滤器放行才可以放行到servlet|jsp资源 
	foFilter()放行方法
url-pattern配置
	3种
	完全匹配		必须以"/"开始 	例如:/a/b
	目录匹配		必须以"/"开始,以"*"结束	例如:/a/b/*
	后缀名匹配	以"*."开始,以字符结束 例如:"*.jsp"
例如:
	afilter	路径 	/*
	bFilter	路径		/demo4
一个资源有可能被多个过滤器匹配成功,多个过滤器的执行顺序是按照web.xml中filter-mapping顺序执行的+

filter总结
	filterConfig:
		过滤器的配置对象
		作用:
			获取全局管理者
			获取当前filter的名称
			获取当前filter的初始化参数
			
	filter-mapping的子标签
		servlet-name:匹配哪个servlet,值写servlet-name的值
			建议:不要在一个filter中重复的匹配servlet
		dispatcher:只可以声明一种
			匹配哪种请求
				REQUEST:从浏览器发送的请求,默认
				FORWARD:转发过来的请求
				ERROR:应服务器错误而发送过来的请求
				INCLUDE:包含过来的请求
errorpage
	在web.xml中配置错误页面
	
统一字符编码
	filter 配置路径/* 过滤器的第一个位置
	在filter中重写getParameter(加强)
	
	方法加强:
		1.继承(获取构造器)
		2.装饰者模式(静态代理)
		3.动态代理
	
	装饰者书写步骤:
		1.要求装饰者和被装饰者实现同一个接口或者继承同一个类
		2.装饰者中要有被装饰者的引用
		3.对需要加强方法进行加强
		4.对不需要的加强的方法调用原来的方法



	
		